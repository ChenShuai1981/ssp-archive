// scalastyle:off
package com.vpon.ssp.report.archive.kafka.consumer

import kafka.common.TopicAndPartition

/**
 * :: Experimental ::
 * Represents any object that has a collection of [[OffsetRange]]s. This can be used access the
 * offset ranges in RDDs generated by the direct Kafka DStream (see
 * [[KafkaUtils.createDirectStream()]]).
 * {{{
 *   KafkaUtils.createDirectStream(...).foreachRDD { rdd =>
 *      val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges
 *      ...
 *   }
 * }}}
 */

trait HasOffsetRanges {
  def offsetRanges: Array[OffsetRange]
}

/**
 * :: Experimental ::
 * Represents a range of offsets from a single Kafka TopicAndPartition. Instances of this class
 * can be created with `OffsetRange.create()`.
 */

final class OffsetRange private(
                                 /** Kafka topic name */
                                 val topic: String,
                                 /** Kafka partition id */
                                 val partition: Int,
                                 /** inclusive starting offset */
                                 val fromOffset: Long,
                                 /** exclusive ending offset */
                                 val untilOffset: Long) extends Serializable {
  import OffsetRange.OffsetRangeTuple

  override def equals(obj: Any): Boolean = obj match {
    case that: OffsetRange =>
      this.topic == that.topic &&
        this.partition == that.partition &&
        this.fromOffset == that.fromOffset &&
        this.untilOffset == that.untilOffset
    case _ => false
  }

  override def hashCode(): Int = {
    toTuple.hashCode()
  }

  override def toString(): String = {
    s"OffsetRange(topic: '$topic', partition: $partition, range: [$fromOffset -> $untilOffset]"
  }

  def toTuple: OffsetRangeTuple = (topic, partition, fromOffset, untilOffset)

  def toTopicAndPartition: TopicAndPartition = TopicAndPartition(topic, partition)
}

/**
 * :: Experimental ::
 * Companion object the provides methods to create instances of [[OffsetRange]].
 */

object OffsetRange {
  def create(topic: String, partition: Int, fromOffset: Long, untilOffset: Long): OffsetRange =
    new OffsetRange(topic, partition, fromOffset, untilOffset)

  def create(
              topicAndPartition: TopicAndPartition,
              fromOffset: Long,
              untilOffset: Long): OffsetRange =
    new OffsetRange(topicAndPartition.topic, topicAndPartition.partition, fromOffset, untilOffset)

  def apply(topic: String, partition: Int, fromOffset: Long, untilOffset: Long): OffsetRange =
    new OffsetRange(topic, partition, fromOffset, untilOffset)

  def apply(
             topicAndPartition: TopicAndPartition,
             fromOffset: Long,
             untilOffset: Long): OffsetRange =
    new OffsetRange(topicAndPartition.topic, topicAndPartition.partition, fromOffset, untilOffset)

  /** this is to avoid ClassNotFoundException during checkpoint restore */

  type OffsetRangeTuple = (String, Int, Long, Long)

  def apply(t: OffsetRangeTuple) =
    new OffsetRange(t._1, t._2, t._3, t._4)
}
// scalastyle:on
