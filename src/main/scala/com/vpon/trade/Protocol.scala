// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: Protocol.proto

package com.vpon.trade

object IMPRESSIONTYPE extends net.sandrogrzicic.scalabuff.Enum {
	sealed trait EnumVal extends Value
	val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

	val UNKNOWN_IMPRESSIONTYPE = new EnumVal { val name = "UNKNOWN_IMPRESSIONTYPE"; val id = 0 }
	val BLANK = new EnumVal { val name = "BLANK"; val id = 1 }
	val DEFAULT = new EnumVal { val name = "DEFAULT"; val id = 2 }
	val PSA = new EnumVal { val name = "PSA"; val id = 3 }
	val KEPT = new EnumVal { val name = "KEPT"; val id = 4 }
	val RESOLD = new EnumVal { val name = "RESOLD"; val id = 5 }
	val RTB = new EnumVal { val name = "RTB"; val id = 6 }
	val EXTERNAL_IMPRESSION = new EnumVal { val name = "EXTERNAL_IMPRESSION"; val id = 7 }
	val EXTERNAL_CLICK = new EnumVal { val name = "EXTERNAL_CLICK"; val id = 8 }

	val UNKNOWN_IMPRESSIONTYPE_VALUE = 0
	val BLANK_VALUE = 1
	val DEFAULT_VALUE = 2
	val PSA_VALUE = 3
	val KEPT_VALUE = 4
	val RESOLD_VALUE = 5
	val RTB_VALUE = 6
	val EXTERNAL_IMPRESSION_VALUE = 7
	val EXTERNAL_CLICK_VALUE = 8

	def valueOf(id: Int) = id match {
		case 0 => UNKNOWN_IMPRESSIONTYPE
		case 1 => BLANK
		case 2 => DEFAULT
		case 3 => PSA
		case 4 => KEPT
		case 5 => RESOLD
		case 6 => RTB
		case 7 => EXTERNAL_IMPRESSION
		case 8 => EXTERNAL_CLICK
		case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
	}
	val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
		def findValueByNumber(id: Int): EnumVal = valueOf(id)
	}
}
object DEALTYPE extends net.sandrogrzicic.scalabuff.Enum {
	sealed trait EnumVal extends Value
	val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

	val NO_PAYMENT = new EnumVal { val name = "NO_PAYMENT"; val id = 0 }
	val CPM = new EnumVal { val name = "CPM"; val id = 1 }
	val CPC = new EnumVal { val name = "CPC"; val id = 2 }
	val CPA = new EnumVal { val name = "CPA"; val id = 3 }

	val NO_PAYMENT_VALUE = 0
	val CPM_VALUE = 1
	val CPC_VALUE = 2
	val CPA_VALUE = 3

	def valueOf(id: Int) = id match {
		case 0 => NO_PAYMENT
		case 1 => CPM
		case 2 => CPC
		case 3 => CPA
		case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
	}
	val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
		def findValueByNumber(id: Int): EnumVal = valueOf(id)
	}
}
object BIDLOSTREASON extends net.sandrogrzicic.scalabuff.Enum {
	sealed trait EnumVal extends Value
	val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

	val UNKNOWN_BIDLOSTREASON = new EnumVal { val name = "UNKNOWN_BIDLOSTREASON"; val id = 0 }
	val LOW_PRICE = new EnumVal { val name = "LOW_PRICE"; val id = 1 }
	val TIMEOUT = new EnumVal { val name = "TIMEOUT"; val id = 2 }
	val ADM_INVALID = new EnumVal { val name = "ADM_INVALID"; val id = 3 }
	val RESPONSE_INVALID = new EnumVal { val name = "RESPONSE_INVALID"; val id = 4 }
	val BID_ID_INVALID = new EnumVal { val name = "BID_ID_INVALID"; val id = 5 }
	val BID_PRICE_INVALID = new EnumVal { val name = "BID_PRICE_INVALID"; val id = 6 }
	val BID_WIN_NOTICE_INVALID = new EnumVal { val name = "BID_WIN_NOTICE_INVALID"; val id = 7 }
	val BID_SEAT_INVALID = new EnumVal { val name = "BID_SEAT_INVALID"; val id = 8 }
	val BID_ADM_TITLE_INVALID = new EnumVal { val name = "BID_ADM_TITLE_INVALID"; val id = 9 }
	val BID_AUCTION_TYPE_INVALID = new EnumVal { val name = "BID_AUCTION_TYPE_INVALID"; val id = 10 }
	val NOT_BIDDING = new EnumVal { val name = "NOT_BIDDING"; val id = 22 }

	val UNKNOWN_BIDLOSTREASON_VALUE = 0
	val LOW_PRICE_VALUE = 1
	val TIMEOUT_VALUE = 2
	val ADM_INVALID_VALUE = 3
	val RESPONSE_INVALID_VALUE = 4
	val BID_ID_INVALID_VALUE = 5
	val BID_PRICE_INVALID_VALUE = 6
	val BID_WIN_NOTICE_INVALID_VALUE = 7
	val BID_SEAT_INVALID_VALUE = 8
	val BID_ADM_TITLE_INVALID_VALUE = 9
	val BID_AUCTION_TYPE_INVALID_VALUE = 10
	val NOT_BIDDING_VALUE = 22

	def valueOf(id: Int) = id match {
		case 0 => UNKNOWN_BIDLOSTREASON
		case 1 => LOW_PRICE
		case 2 => TIMEOUT
		case 3 => ADM_INVALID
		case 4 => RESPONSE_INVALID
		case 5 => BID_ID_INVALID
		case 6 => BID_PRICE_INVALID
		case 7 => BID_WIN_NOTICE_INVALID
		case 8 => BID_SEAT_INVALID
		case 9 => BID_ADM_TITLE_INVALID
		case 10 => BID_AUCTION_TYPE_INVALID
		case 22 => NOT_BIDDING
		case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
	}
	val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
		def findValueByNumber(id: Int): EnumVal = valueOf(id)
	}
}
final case class BidResult (
	`dspId`: String = "",
	`bidLostReason`: BIDLOSTREASON.EnumVal = BIDLOSTREASON._UNINITIALIZED,
	`bidPrice`: Option[Double] = None,
	`currency`: Option[String] = None,
	`dealType`: Option[DEALTYPE.EnumVal] = None,
	`dspGroupId`: Option[String] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[BidResult]
	with net.sandrogrzicic.scalabuff.Parser[BidResult] {

	def setBidPrice(_f: Double) = copy(`bidPrice` = Some(_f))
	def setCurrency(_f: String) = copy(`currency` = Some(_f))
	def setDealType(_f: DEALTYPE.EnumVal) = copy(`dealType` = Some(_f))
	def setDspGroupId(_f: String) = copy(`dspGroupId` = Some(_f))

	def clearBidPrice = copy(`bidPrice` = None)
	def clearCurrency = copy(`currency` = None)
	def clearDealType = copy(`dealType` = None)
	def clearDspGroupId = copy(`dspGroupId` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `dspId`)
		output.writeEnum(2, `bidLostReason`)
		if (`bidPrice`.isDefined) output.writeDouble(3, `bidPrice`.get)
		if (`currency`.isDefined) output.writeString(4, `currency`.get)
		if (`dealType`.isDefined) output.writeEnum(5, `dealType`.get)
		if (`dspGroupId`.isDefined) output.writeString(6, `dspGroupId`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `dspId`)
		__size += computeEnumSize(2, `bidLostReason`)
		if (`bidPrice`.isDefined) __size += computeDoubleSize(3, `bidPrice`.get)
		if (`currency`.isDefined) __size += computeStringSize(4, `currency`.get)
		if (`dealType`.isDefined) __size += computeEnumSize(5, `dealType`.get)
		if (`dspGroupId`.isDefined) __size += computeStringSize(6, `dspGroupId`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): BidResult = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __dspId: String = ""
		var __bidLostReason: BIDLOSTREASON.EnumVal = BIDLOSTREASON._UNINITIALIZED
		var __bidPrice: Option[Double] = `bidPrice`
		var __currency: Option[String] = `currency`
		var __dealType: Option[DEALTYPE.EnumVal] = `dealType`
		var __dspGroupId: Option[String] = `dspGroupId`

		def __newMerged = BidResult(
			__dspId,
			__bidLostReason,
			__bidPrice,
			__currency,
			__dealType,
			__dspGroupId
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __dspId = in.readString()
			case 16 => __bidLostReason = BIDLOSTREASON.valueOf(in.readEnum())
			case 25 => __bidPrice = Some(in.readDouble())
			case 34 => __currency = Some(in.readString())
			case 40 => __dealType = Some(DEALTYPE.valueOf(in.readEnum()))
			case 50 => __dspGroupId = Some(in.readString())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: BidResult) = {
		BidResult(
			m.`dspId`,
			m.`bidLostReason`,
			m.`bidPrice`.orElse(`bidPrice`),
			m.`currency`.orElse(`currency`),
			m.`dealType`.orElse(`dealType`),
			m.`dspGroupId`.orElse(`dspGroupId`)
		)
	}

	def getDefaultInstanceForType = BidResult.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"dspId\": ").append("\"").append(`dspId`).append("\"").append(',')
			sb.append(indent1).append("\"bidLostReason\": ").append("\"").append(`bidLostReason`).append("\"").append(',')
			if (`bidPrice`.isDefined) { sb.append(indent1).append("\"bidPrice\": ").append("\"").append(`bidPrice`.get).append("\"").append(',') }
			if (`currency`.isDefined) { sb.append(indent1).append("\"currency\": ").append("\"").append(`currency`.get).append("\"").append(',') }
			if (`dealType`.isDefined) { sb.append(indent1).append("\"dealType\": ").append("\"").append(`dealType`.get).append("\"").append(',') }
			if (`dspGroupId`.isDefined) { sb.append(indent1).append("\"dspGroupId\": ").append("\"").append(`dspGroupId`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object BidResult {
	@scala.beans.BeanProperty val defaultInstance = new BidResult()

	def parseFrom(data: Array[Byte]): BidResult = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): BidResult = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): BidResult = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): BidResult = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[BidResult] = defaultInstance.mergeDelimitedFromStream(stream)

	val DSP_ID_FIELD_NUMBER = 1
	val BID_LOST_REASON_FIELD_NUMBER = 2
	val BID_PRICE_FIELD_NUMBER = 3
	val CURRENCY_FIELD_NUMBER = 4
	val DEAL_TYPE_FIELD_NUMBER = 5
	val DSP_GROUP_ID_FIELD_NUMBER = 6

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: BidResult) = defaultInstance.mergeFrom(prototype)

}
final case class Rate (
	`exchangeRateVersion`: Int = 0,
	`publisherSspTaxRateVersion`: Int = 0,
	`dspSspTaxRateVersion`: Int = 0
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Rate]
	with net.sandrogrzicic.scalabuff.Parser[Rate] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeInt32(1, `exchangeRateVersion`)
		output.writeInt32(2, `publisherSspTaxRateVersion`)
		output.writeInt32(3, `dspSspTaxRateVersion`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeInt32Size(1, `exchangeRateVersion`)
		__size += computeInt32Size(2, `publisherSspTaxRateVersion`)
		__size += computeInt32Size(3, `dspSspTaxRateVersion`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Rate = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __exchangeRateVersion: Int = 0
		var __publisherSspTaxRateVersion: Int = 0
		var __dspSspTaxRateVersion: Int = 0

		def __newMerged = Rate(
			__exchangeRateVersion,
			__publisherSspTaxRateVersion,
			__dspSspTaxRateVersion
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __exchangeRateVersion = in.readInt32()
			case 16 => __publisherSspTaxRateVersion = in.readInt32()
			case 24 => __dspSspTaxRateVersion = in.readInt32()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Rate) = {
		Rate(
			m.`exchangeRateVersion`,
			m.`publisherSspTaxRateVersion`,
			m.`dspSspTaxRateVersion`
		)
	}

	def getDefaultInstanceForType = Rate.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"exchangeRateVersion\": ").append("\"").append(`exchangeRateVersion`).append("\"").append(',')
			sb.append(indent1).append("\"publisherSspTaxRateVersion\": ").append("\"").append(`publisherSspTaxRateVersion`).append("\"").append(',')
			sb.append(indent1).append("\"dspSspTaxRateVersion\": ").append("\"").append(`dspSspTaxRateVersion`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Rate {
	@scala.beans.BeanProperty val defaultInstance = new Rate()

	def parseFrom(data: Array[Byte]): Rate = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Rate = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Rate = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Rate = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Rate] = defaultInstance.mergeDelimitedFromStream(stream)

	val EXCHANGE_RATE_VERSION_FIELD_NUMBER = 1
	val PUBLISHER_SSP_TAX_RATE_VERSION_FIELD_NUMBER = 2
	val DSP_SSP_TAX_RATE_VERSION_FIELD_NUMBER = 3

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Rate) = defaultInstance.mergeFrom(prototype)

}
final case class Placement (
	`placementId`: String = "",
	`platformId`: String = "",
	`bidFloor`: Double = 0.0,
	`bidFloorCur`: String = ""
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Placement]
	with net.sandrogrzicic.scalabuff.Parser[Placement] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `placementId`)
		output.writeString(2, `platformId`)
		output.writeDouble(3, `bidFloor`)
		output.writeString(4, `bidFloorCur`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `placementId`)
		__size += computeStringSize(2, `platformId`)
		__size += computeDoubleSize(3, `bidFloor`)
		__size += computeStringSize(4, `bidFloorCur`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Placement = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __placementId: String = ""
		var __platformId: String = ""
		var __bidFloor: Double = 0.0
		var __bidFloorCur: String = ""

		def __newMerged = Placement(
			__placementId,
			__platformId,
			__bidFloor,
			__bidFloorCur
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __placementId = in.readString()
			case 18 => __platformId = in.readString()
			case 25 => __bidFloor = in.readDouble()
			case 34 => __bidFloorCur = in.readString()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Placement) = {
		Placement(
			m.`placementId`,
			m.`platformId`,
			m.`bidFloor`,
			m.`bidFloorCur`
		)
	}

	def getDefaultInstanceForType = Placement.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"placementId\": ").append("\"").append(`placementId`).append("\"").append(',')
			sb.append(indent1).append("\"platformId\": ").append("\"").append(`platformId`).append("\"").append(',')
			sb.append(indent1).append("\"bidFloor\": ").append("\"").append(`bidFloor`).append("\"").append(',')
			sb.append(indent1).append("\"bidFloorCur\": ").append("\"").append(`bidFloorCur`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Placement {
	@scala.beans.BeanProperty val defaultInstance = new Placement()

	def parseFrom(data: Array[Byte]): Placement = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Placement = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Placement = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Placement = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Placement] = defaultInstance.mergeDelimitedFromStream(stream)

	val PLACEMENT_ID_FIELD_NUMBER = 1
	val PLATFORM_ID_FIELD_NUMBER = 2
	val BID_FLOOR_FIELD_NUMBER = 3
	val BID_FLOOR_CUR_FIELD_NUMBER = 4

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Placement) = defaultInstance.mergeFrom(prototype)

}
final case class Media (
	`mediaType`: Media.MEDIATYPE.EnumVal = Media.MEDIATYPE._UNINITIALIZED,
	`mediaHeight`: Int = 0,
	`mediaWidth`: Int = 0,
	`supplyType`: Media.SUPPLYTYPE.EnumVal = Media.SUPPLYTYPE._UNINITIALIZED,
	`adPosition`: Option[Media.ADPOSITIONTYPE.EnumVal] = None,
	`mediaFormat`: String = "",
	`iframeState`: Option[Media.IFRAMESTATETYPE.EnumVal] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Media]
	with net.sandrogrzicic.scalabuff.Parser[Media] {

	def setAdPosition(_f: Media.ADPOSITIONTYPE.EnumVal) = copy(`adPosition` = Some(_f))
	def setIframeState(_f: Media.IFRAMESTATETYPE.EnumVal) = copy(`iframeState` = Some(_f))

	def clearAdPosition = copy(`adPosition` = None)
	def clearIframeState = copy(`iframeState` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeEnum(1, `mediaType`)
		output.writeInt32(2, `mediaHeight`)
		output.writeInt32(3, `mediaWidth`)
		output.writeEnum(4, `supplyType`)
		if (`adPosition`.isDefined) output.writeEnum(5, `adPosition`.get)
		output.writeString(6, `mediaFormat`)
		if (`iframeState`.isDefined) output.writeEnum(7, `iframeState`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeEnumSize(1, `mediaType`)
		__size += computeInt32Size(2, `mediaHeight`)
		__size += computeInt32Size(3, `mediaWidth`)
		__size += computeEnumSize(4, `supplyType`)
		if (`adPosition`.isDefined) __size += computeEnumSize(5, `adPosition`.get)
		__size += computeStringSize(6, `mediaFormat`)
		if (`iframeState`.isDefined) __size += computeEnumSize(7, `iframeState`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Media = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __mediaType: Media.MEDIATYPE.EnumVal = Media.MEDIATYPE._UNINITIALIZED
		var __mediaHeight: Int = 0
		var __mediaWidth: Int = 0
		var __supplyType: Media.SUPPLYTYPE.EnumVal = Media.SUPPLYTYPE._UNINITIALIZED
		var __adPosition: Option[Media.ADPOSITIONTYPE.EnumVal] = `adPosition`
		var __mediaFormat: String = ""
		var __iframeState: Option[Media.IFRAMESTATETYPE.EnumVal] = `iframeState`

		def __newMerged = Media(
			__mediaType,
			__mediaHeight,
			__mediaWidth,
			__supplyType,
			__adPosition,
			__mediaFormat,
			__iframeState
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __mediaType = Media.MEDIATYPE.valueOf(in.readEnum())
			case 16 => __mediaHeight = in.readInt32()
			case 24 => __mediaWidth = in.readInt32()
			case 32 => __supplyType = Media.SUPPLYTYPE.valueOf(in.readEnum())
			case 40 => __adPosition = Some(Media.ADPOSITIONTYPE.valueOf(in.readEnum()))
			case 50 => __mediaFormat = in.readString()
			case 56 => __iframeState = Some(Media.IFRAMESTATETYPE.valueOf(in.readEnum()))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Media) = {
		Media(
			m.`mediaType`,
			m.`mediaHeight`,
			m.`mediaWidth`,
			m.`supplyType`,
			m.`adPosition`.orElse(`adPosition`),
			m.`mediaFormat`,
			m.`iframeState`.orElse(`iframeState`)
		)
	}

	def getDefaultInstanceForType = Media.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"mediaType\": ").append("\"").append(`mediaType`).append("\"").append(',')
			sb.append(indent1).append("\"mediaHeight\": ").append("\"").append(`mediaHeight`).append("\"").append(',')
			sb.append(indent1).append("\"mediaWidth\": ").append("\"").append(`mediaWidth`).append("\"").append(',')
			sb.append(indent1).append("\"supplyType\": ").append("\"").append(`supplyType`).append("\"").append(',')
			if (`adPosition`.isDefined) { sb.append(indent1).append("\"adPosition\": ").append("\"").append(`adPosition`.get).append("\"").append(',') }
			sb.append(indent1).append("\"mediaFormat\": ").append("\"").append(`mediaFormat`).append("\"").append(',')
			if (`iframeState`.isDefined) { sb.append(indent1).append("\"iframeState\": ").append("\"").append(`iframeState`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Media {
	@scala.beans.BeanProperty val defaultInstance = new Media()

	def parseFrom(data: Array[Byte]): Media = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Media = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Media = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Media = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Media] = defaultInstance.mergeDelimitedFromStream(stream)

	val MEDIA_TYPE_FIELD_NUMBER = 1
	val MEDIA_HEIGHT_FIELD_NUMBER = 2
	val MEDIA_WIDTH_FIELD_NUMBER = 3
	val SUPPLY_TYPE_FIELD_NUMBER = 4
	val AD_POSITION_FIELD_NUMBER = 5
	val MEDIA_FORMAT_FIELD_NUMBER = 6
	val IFRAME_STATE_FIELD_NUMBER = 7

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Media) = defaultInstance.mergeFrom(prototype)

	object MEDIATYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val UNKNOWN_MEDIATYPE = new EnumVal { val name = "UNKNOWN_MEDIATYPE"; val id = 0 }
		val BANNER = new EnumVal { val name = "BANNER"; val id = 1 }
		val INTERSTITIAL = new EnumVal { val name = "INTERSTITIAL"; val id = 2 }

		val UNKNOWN_MEDIATYPE_VALUE = 0
		val BANNER_VALUE = 1
		val INTERSTITIAL_VALUE = 2

		def valueOf(id: Int) = id match {
			case 0 => UNKNOWN_MEDIATYPE
			case 1 => BANNER
			case 2 => INTERSTITIAL
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

	object SUPPLYTYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val UNKNOWN_SUPPLYTYPE = new EnumVal { val name = "UNKNOWN_SUPPLYTYPE"; val id = 0 }
		val WEB_PLACEMENTS = new EnumVal { val name = "WEB_PLACEMENTS"; val id = 1 }
		val MOBILE_WEB_PLACEMENTS = new EnumVal { val name = "MOBILE_WEB_PLACEMENTS"; val id = 2 }
		val APPS_PLACEMENTS = new EnumVal { val name = "APPS_PLACEMENTS"; val id = 3 }
		val TV_PLACEMENTS = new EnumVal { val name = "TV_PLACEMENTS"; val id = 4 }

		val UNKNOWN_SUPPLYTYPE_VALUE = 0
		val WEB_PLACEMENTS_VALUE = 1
		val MOBILE_WEB_PLACEMENTS_VALUE = 2
		val APPS_PLACEMENTS_VALUE = 3
		val TV_PLACEMENTS_VALUE = 4

		def valueOf(id: Int) = id match {
			case 0 => UNKNOWN_SUPPLYTYPE
			case 1 => WEB_PLACEMENTS
			case 2 => MOBILE_WEB_PLACEMENTS
			case 3 => APPS_PLACEMENTS
			case 4 => TV_PLACEMENTS
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

	object ADPOSITIONTYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val UNKNOWN_ADPOSITIONTYPE = new EnumVal { val name = "UNKNOWN_ADPOSITIONTYPE"; val id = 0 }
		val ABOVE_FOLD = new EnumVal { val name = "ABOVE_FOLD"; val id = 1 }
		val DEPRECATED = new EnumVal { val name = "DEPRECATED"; val id = 2 }
		val BELOW_FOLD = new EnumVal { val name = "BELOW_FOLD"; val id = 3 }
		val HEADER = new EnumVal { val name = "HEADER"; val id = 4 }
		val FOOTER = new EnumVal { val name = "FOOTER"; val id = 5 }
		val SIDEBAR = new EnumVal { val name = "SIDEBAR"; val id = 6 }
		val FULLSCREEN = new EnumVal { val name = "FULLSCREEN"; val id = 7 }

		val UNKNOWN_ADPOSITIONTYPE_VALUE = 0
		val ABOVE_FOLD_VALUE = 1
		val DEPRECATED_VALUE = 2
		val BELOW_FOLD_VALUE = 3
		val HEADER_VALUE = 4
		val FOOTER_VALUE = 5
		val SIDEBAR_VALUE = 6
		val FULLSCREEN_VALUE = 7

		def valueOf(id: Int) = id match {
			case 0 => UNKNOWN_ADPOSITIONTYPE
			case 1 => ABOVE_FOLD
			case 2 => DEPRECATED
			case 3 => BELOW_FOLD
			case 4 => HEADER
			case 5 => FOOTER
			case 6 => SIDEBAR
			case 7 => FULLSCREEN
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

	object IFRAMESTATETYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val UNKNOWN_IFRAMESTATETYPE = new EnumVal { val name = "UNKNOWN_IFRAMESTATETYPE"; val id = 0 }
		val NO_IFRAME = new EnumVal { val name = "NO_IFRAME"; val id = 1 }
		val SAME_DOMAIN_IFRAME = new EnumVal { val name = "SAME_DOMAIN_IFRAME"; val id = 2 }
		val CROSS_DOMAIN_IFRAME = new EnumVal { val name = "CROSS_DOMAIN_IFRAME"; val id = 3 }

		val UNKNOWN_IFRAMESTATETYPE_VALUE = 0
		val NO_IFRAME_VALUE = 1
		val SAME_DOMAIN_IFRAME_VALUE = 2
		val CROSS_DOMAIN_IFRAME_VALUE = 3

		def valueOf(id: Int) = id match {
			case 0 => UNKNOWN_IFRAMESTATETYPE
			case 1 => NO_IFRAME
			case 2 => SAME_DOMAIN_IFRAME
			case 3 => CROSS_DOMAIN_IFRAME
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}
final case class Site (
	`siteDomain`: String = "",
	`siteProtocol`: Site.PROTOCOLTYPE.EnumVal = Site.PROTOCOLTYPE._UNINITIALIZED
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Site]
	with net.sandrogrzicic.scalabuff.Parser[Site] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `siteDomain`)
		output.writeEnum(2, `siteProtocol`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `siteDomain`)
		__size += computeEnumSize(2, `siteProtocol`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Site = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __siteDomain: String = ""
		var __siteProtocol: Site.PROTOCOLTYPE.EnumVal = Site.PROTOCOLTYPE._UNINITIALIZED

		def __newMerged = Site(
			__siteDomain,
			__siteProtocol
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __siteDomain = in.readString()
			case 16 => __siteProtocol = Site.PROTOCOLTYPE.valueOf(in.readEnum())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Site) = {
		Site(
			m.`siteDomain`,
			m.`siteProtocol`
		)
	}

	def getDefaultInstanceForType = Site.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"siteDomain\": ").append("\"").append(`siteDomain`).append("\"").append(',')
			sb.append(indent1).append("\"siteProtocol\": ").append("\"").append(`siteProtocol`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Site {
	@scala.beans.BeanProperty val defaultInstance = new Site()

	def parseFrom(data: Array[Byte]): Site = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Site = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Site = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Site = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Site] = defaultInstance.mergeDelimitedFromStream(stream)

	val SITE_DOMAIN_FIELD_NUMBER = 1
	val SITE_PROTOCOL_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Site) = defaultInstance.mergeFrom(prototype)

	object PROTOCOLTYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val UNKNOWN_PROTOCOLTYPE = new EnumVal { val name = "UNKNOWN_PROTOCOLTYPE"; val id = 0 }
		val HTTP = new EnumVal { val name = "HTTP"; val id = 1 }
		val HTTPS = new EnumVal { val name = "HTTPS"; val id = 2 }

		val UNKNOWN_PROTOCOLTYPE_VALUE = 0
		val HTTP_VALUE = 1
		val HTTPS_VALUE = 2

		def valueOf(id: Int) = id match {
			case 0 => UNKNOWN_PROTOCOLTYPE
			case 1 => HTTP
			case 2 => HTTPS
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}
final case class App (
	`appId`: String = ""
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[App]
	with net.sandrogrzicic.scalabuff.Parser[App] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `appId`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `appId`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): App = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __appId: String = ""

		def __newMerged = App(
			__appId
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __appId = in.readString()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: App) = {
		App(
			m.`appId`
		)
	}

	def getDefaultInstanceForType = App.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"appId\": ").append("\"").append(`appId`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object App {
	@scala.beans.BeanProperty val defaultInstance = new App()

	def parseFrom(data: Array[Byte]): App = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): App = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): App = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): App = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[App] = defaultInstance.mergeDelimitedFromStream(stream)

	val APP_ID_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: App) = defaultInstance.mergeFrom(prototype)

}
final case class Device (
	`userAgent`: String = "",
	`clientIp`: String = "",
	`language`: String = "",
	`screenAvailableHeight`: Option[Int] = None,
	`screenAvailableWidth`: Option[Int] = None,
	`screenHeight`: Option[Int] = None,
	`screenWidth`: Option[Int] = None,
	`screenDensity`: Option[Double] = None,
	`connectionType`: Option[String] = None,
	`telephonyType`: Option[String] = None,
	`mobileCountryCode`: Option[String] = None,
	`mobileNetworkCode`: Option[String] = None,
	`deviceTime`: Option[Device.DeviceTime] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Device]
	with net.sandrogrzicic.scalabuff.Parser[Device] {

	def setScreenAvailableHeight(_f: Int) = copy(`screenAvailableHeight` = Some(_f))
	def setScreenAvailableWidth(_f: Int) = copy(`screenAvailableWidth` = Some(_f))
	def setScreenHeight(_f: Int) = copy(`screenHeight` = Some(_f))
	def setScreenWidth(_f: Int) = copy(`screenWidth` = Some(_f))
	def setScreenDensity(_f: Double) = copy(`screenDensity` = Some(_f))
	def setConnectionType(_f: String) = copy(`connectionType` = Some(_f))
	def setTelephonyType(_f: String) = copy(`telephonyType` = Some(_f))
	def setMobileCountryCode(_f: String) = copy(`mobileCountryCode` = Some(_f))
	def setMobileNetworkCode(_f: String) = copy(`mobileNetworkCode` = Some(_f))
	def setDeviceTime(_f: Device.DeviceTime) = copy(`deviceTime` = Some(_f))

	def clearScreenAvailableHeight = copy(`screenAvailableHeight` = None)
	def clearScreenAvailableWidth = copy(`screenAvailableWidth` = None)
	def clearScreenHeight = copy(`screenHeight` = None)
	def clearScreenWidth = copy(`screenWidth` = None)
	def clearScreenDensity = copy(`screenDensity` = None)
	def clearConnectionType = copy(`connectionType` = None)
	def clearTelephonyType = copy(`telephonyType` = None)
	def clearMobileCountryCode = copy(`mobileCountryCode` = None)
	def clearMobileNetworkCode = copy(`mobileNetworkCode` = None)
	def clearDeviceTime = copy(`deviceTime` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `userAgent`)
		output.writeString(2, `clientIp`)
		output.writeString(3, `language`)
		if (`screenAvailableHeight`.isDefined) output.writeInt32(4, `screenAvailableHeight`.get)
		if (`screenAvailableWidth`.isDefined) output.writeInt32(5, `screenAvailableWidth`.get)
		if (`screenHeight`.isDefined) output.writeInt32(6, `screenHeight`.get)
		if (`screenWidth`.isDefined) output.writeInt32(7, `screenWidth`.get)
		if (`screenDensity`.isDefined) output.writeDouble(8, `screenDensity`.get)
		if (`connectionType`.isDefined) output.writeString(9, `connectionType`.get)
		if (`telephonyType`.isDefined) output.writeString(10, `telephonyType`.get)
		if (`mobileCountryCode`.isDefined) output.writeString(11, `mobileCountryCode`.get)
		if (`mobileNetworkCode`.isDefined) output.writeString(12, `mobileNetworkCode`.get)
		if (`deviceTime`.isDefined) output.writeMessage(13, `deviceTime`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `userAgent`)
		__size += computeStringSize(2, `clientIp`)
		__size += computeStringSize(3, `language`)
		if (`screenAvailableHeight`.isDefined) __size += computeInt32Size(4, `screenAvailableHeight`.get)
		if (`screenAvailableWidth`.isDefined) __size += computeInt32Size(5, `screenAvailableWidth`.get)
		if (`screenHeight`.isDefined) __size += computeInt32Size(6, `screenHeight`.get)
		if (`screenWidth`.isDefined) __size += computeInt32Size(7, `screenWidth`.get)
		if (`screenDensity`.isDefined) __size += computeDoubleSize(8, `screenDensity`.get)
		if (`connectionType`.isDefined) __size += computeStringSize(9, `connectionType`.get)
		if (`telephonyType`.isDefined) __size += computeStringSize(10, `telephonyType`.get)
		if (`mobileCountryCode`.isDefined) __size += computeStringSize(11, `mobileCountryCode`.get)
		if (`mobileNetworkCode`.isDefined) __size += computeStringSize(12, `mobileNetworkCode`.get)
		if (`deviceTime`.isDefined) __size += computeMessageSize(13, `deviceTime`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Device = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __userAgent: String = ""
		var __clientIp: String = ""
		var __language: String = ""
		var __screenAvailableHeight: Option[Int] = `screenAvailableHeight`
		var __screenAvailableWidth: Option[Int] = `screenAvailableWidth`
		var __screenHeight: Option[Int] = `screenHeight`
		var __screenWidth: Option[Int] = `screenWidth`
		var __screenDensity: Option[Double] = `screenDensity`
		var __connectionType: Option[String] = `connectionType`
		var __telephonyType: Option[String] = `telephonyType`
		var __mobileCountryCode: Option[String] = `mobileCountryCode`
		var __mobileNetworkCode: Option[String] = `mobileNetworkCode`
		var __deviceTime: Option[Device.DeviceTime] = `deviceTime`

		def __newMerged = Device(
			__userAgent,
			__clientIp,
			__language,
			__screenAvailableHeight,
			__screenAvailableWidth,
			__screenHeight,
			__screenWidth,
			__screenDensity,
			__connectionType,
			__telephonyType,
			__mobileCountryCode,
			__mobileNetworkCode,
			__deviceTime
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __userAgent = in.readString()
			case 18 => __clientIp = in.readString()
			case 26 => __language = in.readString()
			case 32 => __screenAvailableHeight = Some(in.readInt32())
			case 40 => __screenAvailableWidth = Some(in.readInt32())
			case 48 => __screenHeight = Some(in.readInt32())
			case 56 => __screenWidth = Some(in.readInt32())
			case 65 => __screenDensity = Some(in.readDouble())
			case 74 => __connectionType = Some(in.readString())
			case 82 => __telephonyType = Some(in.readString())
			case 90 => __mobileCountryCode = Some(in.readString())
			case 98 => __mobileNetworkCode = Some(in.readString())
			case 106 => __deviceTime = Some(readMessage[Device.DeviceTime](in, __deviceTime.orElse({
				__deviceTime = Device.DeviceTime.defaultInstance
				__deviceTime
			}).get, _emptyRegistry))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Device) = {
		Device(
			m.`userAgent`,
			m.`clientIp`,
			m.`language`,
			m.`screenAvailableHeight`.orElse(`screenAvailableHeight`),
			m.`screenAvailableWidth`.orElse(`screenAvailableWidth`),
			m.`screenHeight`.orElse(`screenHeight`),
			m.`screenWidth`.orElse(`screenWidth`),
			m.`screenDensity`.orElse(`screenDensity`),
			m.`connectionType`.orElse(`connectionType`),
			m.`telephonyType`.orElse(`telephonyType`),
			m.`mobileCountryCode`.orElse(`mobileCountryCode`),
			m.`mobileNetworkCode`.orElse(`mobileNetworkCode`),
			m.`deviceTime`.orElse(`deviceTime`)
		)
	}

	def getDefaultInstanceForType = Device.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"userAgent\": ").append("\"").append(`userAgent`).append("\"").append(',')
			sb.append(indent1).append("\"clientIp\": ").append("\"").append(`clientIp`).append("\"").append(',')
			sb.append(indent1).append("\"language\": ").append("\"").append(`language`).append("\"").append(',')
			if (`screenAvailableHeight`.isDefined) { sb.append(indent1).append("\"screenAvailableHeight\": ").append("\"").append(`screenAvailableHeight`.get).append("\"").append(',') }
			if (`screenAvailableWidth`.isDefined) { sb.append(indent1).append("\"screenAvailableWidth\": ").append("\"").append(`screenAvailableWidth`.get).append("\"").append(',') }
			if (`screenHeight`.isDefined) { sb.append(indent1).append("\"screenHeight\": ").append("\"").append(`screenHeight`.get).append("\"").append(',') }
			if (`screenWidth`.isDefined) { sb.append(indent1).append("\"screenWidth\": ").append("\"").append(`screenWidth`.get).append("\"").append(',') }
			if (`screenDensity`.isDefined) { sb.append(indent1).append("\"screenDensity\": ").append("\"").append(`screenDensity`.get).append("\"").append(',') }
			if (`connectionType`.isDefined) { sb.append(indent1).append("\"connectionType\": ").append("\"").append(`connectionType`.get).append("\"").append(',') }
			if (`telephonyType`.isDefined) { sb.append(indent1).append("\"telephonyType\": ").append("\"").append(`telephonyType`.get).append("\"").append(',') }
			if (`mobileCountryCode`.isDefined) { sb.append(indent1).append("\"mobileCountryCode\": ").append("\"").append(`mobileCountryCode`.get).append("\"").append(',') }
			if (`mobileNetworkCode`.isDefined) { sb.append(indent1).append("\"mobileNetworkCode\": ").append("\"").append(`mobileNetworkCode`.get).append("\"").append(',') }
			if (`deviceTime`.isDefined) { sb.append(indent1).append("\"deviceTime\": ").append(`deviceTime`.get.toJson(indent + 1)).append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Device {
	@scala.beans.BeanProperty val defaultInstance = new Device()

	def parseFrom(data: Array[Byte]): Device = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Device = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Device = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Device = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Device] = defaultInstance.mergeDelimitedFromStream(stream)

	val USER_AGENT_FIELD_NUMBER = 1
	val CLIENT_IP_FIELD_NUMBER = 2
	val LANGUAGE_FIELD_NUMBER = 3
	val SCREEN_AVAILABLE_HEIGHT_FIELD_NUMBER = 4
	val SCREEN_AVAILABLE_WIDTH_FIELD_NUMBER = 5
	val SCREEN_HEIGHT_FIELD_NUMBER = 6
	val SCREEN_WIDTH_FIELD_NUMBER = 7
	val SCREEN_DENSITY_FIELD_NUMBER = 8
	val CONNECTION_TYPE_FIELD_NUMBER = 9
	val TELEPHONY_TYPE_FIELD_NUMBER = 10
	val MOBILE_COUNTRY_CODE_FIELD_NUMBER = 11
	val MOBILE_NETWORK_CODE_FIELD_NUMBER = 12
	val DEVICE_TIME_FIELD_NUMBER = 13

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Device) = defaultInstance.mergeFrom(prototype)

	final case class DeviceTime (
		`clientTimestamp`: Option[Long] = None,
		`clientTimezone`: Option[Int] = None
	) extends com.google.protobuf.GeneratedMessageLite
		with com.google.protobuf.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[DeviceTime]
		with net.sandrogrzicic.scalabuff.Parser[DeviceTime] {

		def setClientTimestamp(_f: Long) = copy(`clientTimestamp` = Some(_f))
		def setClientTimezone(_f: Int) = copy(`clientTimezone` = Some(_f))

		def clearClientTimestamp = copy(`clientTimestamp` = None)
		def clearClientTimezone = copy(`clientTimezone` = None)

		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			if (`clientTimestamp`.isDefined) output.writeInt64(1, `clientTimestamp`.get)
			if (`clientTimezone`.isDefined) output.writeInt32(2, `clientTimezone`.get)
		}

		def getSerializedSize = {
			import com.google.protobuf.CodedOutputStream._
			var __size = 0
			if (`clientTimestamp`.isDefined) __size += computeInt64Size(1, `clientTimestamp`.get)
			if (`clientTimezone`.isDefined) __size += computeInt32Size(2, `clientTimezone`.get)

			__size
		}

		def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): DeviceTime = {
			import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __clientTimestamp: Option[Long] = `clientTimestamp`
			var __clientTimezone: Option[Int] = `clientTimezone`

			def __newMerged = DeviceTime(
				__clientTimestamp,
				__clientTimezone
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 8 => __clientTimestamp = Some(in.readInt64())
				case 16 => __clientTimezone = Some(in.readInt32())
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: DeviceTime) = {
			DeviceTime(
				m.`clientTimestamp`.orElse(`clientTimestamp`),
				m.`clientTimezone`.orElse(`clientTimezone`)
			)
		}

		def getDefaultInstanceForType = DeviceTime.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				if (`clientTimestamp`.isDefined) { sb.append(indent1).append("\"clientTimestamp\": ").append("\"").append(`clientTimestamp`.get).append("\"").append(',') }
				if (`clientTimezone`.isDefined) { sb.append(indent1).append("\"clientTimezone\": ").append("\"").append(`clientTimezone`.get).append("\"").append(',') }
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object DeviceTime {
		@scala.beans.BeanProperty val defaultInstance = new DeviceTime()

		def parseFrom(data: Array[Byte]): DeviceTime = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): DeviceTime = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf.ByteString): DeviceTime = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): DeviceTime = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[DeviceTime] = defaultInstance.mergeDelimitedFromStream(stream)

		val CLIENT_TIMESTAMP_FIELD_NUMBER = 1
		val CLIENT_TIMEZONE_FIELD_NUMBER = 2

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: DeviceTime) = defaultInstance.mergeFrom(prototype)

	}
}
final case class SDK (
	`version`: String = ""
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[SDK]
	with net.sandrogrzicic.scalabuff.Parser[SDK] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `version`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `version`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): SDK = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __version: String = ""

		def __newMerged = SDK(
			__version
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __version = in.readString()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: SDK) = {
		SDK(
			m.`version`
		)
	}

	def getDefaultInstanceForType = SDK.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"version\": ").append("\"").append(`version`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object SDK {
	@scala.beans.BeanProperty val defaultInstance = new SDK()

	def parseFrom(data: Array[Byte]): SDK = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): SDK = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): SDK = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): SDK = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[SDK] = defaultInstance.mergeDelimitedFromStream(stream)

	val VERSION_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: SDK) = defaultInstance.mergeFrom(prototype)

}
final case class User (
	`age`: Option[Int] = None,
	`gender`: Option[User.GENDERTYPE.EnumVal] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[User]
	with net.sandrogrzicic.scalabuff.Parser[User] {

	def setAge(_f: Int) = copy(`age` = Some(_f))
	def setGender(_f: User.GENDERTYPE.EnumVal) = copy(`gender` = Some(_f))

	def clearAge = copy(`age` = None)
	def clearGender = copy(`gender` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		if (`age`.isDefined) output.writeInt32(1, `age`.get)
		if (`gender`.isDefined) output.writeEnum(2, `gender`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		if (`age`.isDefined) __size += computeInt32Size(1, `age`.get)
		if (`gender`.isDefined) __size += computeEnumSize(2, `gender`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): User = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __age: Option[Int] = `age`
		var __gender: Option[User.GENDERTYPE.EnumVal] = `gender`

		def __newMerged = User(
			__age,
			__gender
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __age = Some(in.readInt32())
			case 16 => __gender = Some(User.GENDERTYPE.valueOf(in.readEnum()))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: User) = {
		User(
			m.`age`.orElse(`age`),
			m.`gender`.orElse(`gender`)
		)
	}

	def getDefaultInstanceForType = User.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			if (`age`.isDefined) { sb.append(indent1).append("\"age\": ").append("\"").append(`age`.get).append("\"").append(',') }
			if (`gender`.isDefined) { sb.append(indent1).append("\"gender\": ").append("\"").append(`gender`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object User {
	@scala.beans.BeanProperty val defaultInstance = new User()

	def parseFrom(data: Array[Byte]): User = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): User = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): User = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): User = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[User] = defaultInstance.mergeDelimitedFromStream(stream)

	val AGE_FIELD_NUMBER = 1
	val GENDER_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: User) = defaultInstance.mergeFrom(prototype)

	object GENDERTYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val UNKNOWN_GENDERTYPE = new EnumVal { val name = "UNKNOWN_GENDERTYPE"; val id = 0 }
		val MALE = new EnumVal { val name = "MALE"; val id = 1 }
		val FEMALE = new EnumVal { val name = "FEMALE"; val id = 2 }

		val UNKNOWN_GENDERTYPE_VALUE = 0
		val MALE_VALUE = 1
		val FEMALE_VALUE = 2

		def valueOf(id: Int) = id match {
			case 0 => UNKNOWN_GENDERTYPE
			case 1 => MALE
			case 2 => FEMALE
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}
final case class BidWinner (
	`dspId`: String = "",
	`bidPrice`: Double = 0.0,
	`clearPrice`: Double = 0.0,
	`dealType`: DEALTYPE.EnumVal = DEALTYPE._UNINITIALIZED,
	`currency`: String = "",
	`dspGroupId`: Option[String] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[BidWinner]
	with net.sandrogrzicic.scalabuff.Parser[BidWinner] {

	def setDspGroupId(_f: String) = copy(`dspGroupId` = Some(_f))

	def clearDspGroupId = copy(`dspGroupId` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `dspId`)
		output.writeDouble(2, `bidPrice`)
		output.writeDouble(3, `clearPrice`)
		output.writeEnum(4, `dealType`)
		output.writeString(5, `currency`)
		if (`dspGroupId`.isDefined) output.writeString(6, `dspGroupId`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `dspId`)
		__size += computeDoubleSize(2, `bidPrice`)
		__size += computeDoubleSize(3, `clearPrice`)
		__size += computeEnumSize(4, `dealType`)
		__size += computeStringSize(5, `currency`)
		if (`dspGroupId`.isDefined) __size += computeStringSize(6, `dspGroupId`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): BidWinner = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __dspId: String = ""
		var __bidPrice: Double = 0.0
		var __clearPrice: Double = 0.0
		var __dealType: DEALTYPE.EnumVal = DEALTYPE._UNINITIALIZED
		var __currency: String = ""
		var __dspGroupId: Option[String] = `dspGroupId`

		def __newMerged = BidWinner(
			__dspId,
			__bidPrice,
			__clearPrice,
			__dealType,
			__currency,
			__dspGroupId
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __dspId = in.readString()
			case 17 => __bidPrice = in.readDouble()
			case 25 => __clearPrice = in.readDouble()
			case 32 => __dealType = DEALTYPE.valueOf(in.readEnum())
			case 42 => __currency = in.readString()
			case 50 => __dspGroupId = Some(in.readString())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: BidWinner) = {
		BidWinner(
			m.`dspId`,
			m.`bidPrice`,
			m.`clearPrice`,
			m.`dealType`,
			m.`currency`,
			m.`dspGroupId`.orElse(`dspGroupId`)
		)
	}

	def getDefaultInstanceForType = BidWinner.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"dspId\": ").append("\"").append(`dspId`).append("\"").append(',')
			sb.append(indent1).append("\"bidPrice\": ").append("\"").append(`bidPrice`).append("\"").append(',')
			sb.append(indent1).append("\"clearPrice\": ").append("\"").append(`clearPrice`).append("\"").append(',')
			sb.append(indent1).append("\"dealType\": ").append("\"").append(`dealType`).append("\"").append(',')
			sb.append(indent1).append("\"currency\": ").append("\"").append(`currency`).append("\"").append(',')
			if (`dspGroupId`.isDefined) { sb.append(indent1).append("\"dspGroupId\": ").append("\"").append(`dspGroupId`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object BidWinner {
	@scala.beans.BeanProperty val defaultInstance = new BidWinner()

	def parseFrom(data: Array[Byte]): BidWinner = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): BidWinner = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): BidWinner = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): BidWinner = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[BidWinner] = defaultInstance.mergeDelimitedFromStream(stream)

	val DSP_ID_FIELD_NUMBER = 1
	val BID_PRICE_FIELD_NUMBER = 2
	val CLEAR_PRICE_FIELD_NUMBER = 3
	val DEAL_TYPE_FIELD_NUMBER = 4
	val CURRENCY_FIELD_NUMBER = 5
	val DSP_GROUP_ID_FIELD_NUMBER = 6

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: BidWinner) = defaultInstance.mergeFrom(prototype)

}
final case class TradeLog (
	`bidId`: String = "",
	`bidTimestamp`: Long = 0L,
	`impressionType`: IMPRESSIONTYPE.EnumVal = IMPRESSIONTYPE._UNINITIALIZED,
	`placement`: Placement = Placement.defaultInstance,
	`media`: Media = Media.defaultInstance,
	`device`: Device = Device.defaultInstance,
	`rate`: Rate = Rate.defaultInstance,
	`user`: Option[User] = None,
	`site`: Option[Site] = None,
	`app`: Option[App] = None,
	`winner`: Option[BidWinner] = None,
	`losers`: scala.collection.immutable.Seq[BidResult] = Vector.empty[BidResult],
	`sdk`: Option[SDK] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[TradeLog]
	with net.sandrogrzicic.scalabuff.Parser[TradeLog] {

	def setUser(_f: User) = copy(`user` = Some(_f))
	def setSite(_f: Site) = copy(`site` = Some(_f))
	def setApp(_f: App) = copy(`app` = Some(_f))
	def setWinner(_f: BidWinner) = copy(`winner` = Some(_f))
	def setLosers(_i: Int, _v: BidResult) = copy(`losers` = `losers`.updated(_i, _v))
	def addLosers(_f: BidResult) = copy(`losers` = `losers` :+ _f)
	def addAllLosers(_f: BidResult*) = copy(`losers` = `losers` ++ _f)
	def addAllLosers(_f: TraversableOnce[BidResult]) = copy(`losers` = `losers` ++ _f)
	def setSdk(_f: SDK) = copy(`sdk` = Some(_f))

	def clearUser = copy(`user` = None)
	def clearSite = copy(`site` = None)
	def clearApp = copy(`app` = None)
	def clearWinner = copy(`winner` = None)
	def clearLosers = copy(`losers` = Vector.empty[BidResult])
	def clearSdk = copy(`sdk` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `bidId`)
		output.writeInt64(2, `bidTimestamp`)
		output.writeEnum(3, `impressionType`)
		output.writeMessage(4, `placement`)
		output.writeMessage(5, `media`)
		output.writeMessage(6, `device`)
		output.writeMessage(7, `rate`)
		if (`user`.isDefined) output.writeMessage(8, `user`.get)
		if (`site`.isDefined) output.writeMessage(9, `site`.get)
		if (`app`.isDefined) output.writeMessage(10, `app`.get)
		if (`winner`.isDefined) output.writeMessage(11, `winner`.get)
		for (_v <- `losers`) output.writeMessage(12, _v)
		if (`sdk`.isDefined) output.writeMessage(13, `sdk`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `bidId`)
		__size += computeInt64Size(2, `bidTimestamp`)
		__size += computeEnumSize(3, `impressionType`)
		__size += computeMessageSize(4, `placement`)
		__size += computeMessageSize(5, `media`)
		__size += computeMessageSize(6, `device`)
		__size += computeMessageSize(7, `rate`)
		if (`user`.isDefined) __size += computeMessageSize(8, `user`.get)
		if (`site`.isDefined) __size += computeMessageSize(9, `site`.get)
		if (`app`.isDefined) __size += computeMessageSize(10, `app`.get)
		if (`winner`.isDefined) __size += computeMessageSize(11, `winner`.get)
		for (_v <- `losers`) __size += computeMessageSize(12, _v)
		if (`sdk`.isDefined) __size += computeMessageSize(13, `sdk`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): TradeLog = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __bidId: String = ""
		var __bidTimestamp: Long = 0L
		var __impressionType: IMPRESSIONTYPE.EnumVal = IMPRESSIONTYPE._UNINITIALIZED
		var __placement: Placement = Placement.defaultInstance
		var __media: Media = Media.defaultInstance
		var __device: Device = Device.defaultInstance
		var __rate: Rate = Rate.defaultInstance
		var __user: Option[User] = `user`
		var __site: Option[Site] = `site`
		var __app: Option[App] = `app`
		var __winner: Option[BidWinner] = `winner`
		val __losers: scala.collection.mutable.Buffer[BidResult] = `losers`.toBuffer
		var __sdk: Option[SDK] = `sdk`

		def __newMerged = TradeLog(
			__bidId,
			__bidTimestamp,
			__impressionType,
			__placement,
			__media,
			__device,
			__rate,
			__user,
			__site,
			__app,
			__winner,
			Vector(__losers: _*),
			__sdk
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __bidId = in.readString()
			case 16 => __bidTimestamp = in.readInt64()
			case 24 => __impressionType = IMPRESSIONTYPE.valueOf(in.readEnum())
			case 34 => __placement = readMessage[Placement](in, __placement, _emptyRegistry)
			case 42 => __media = readMessage[Media](in, __media, _emptyRegistry)
			case 50 => __device = readMessage[Device](in, __device, _emptyRegistry)
			case 58 => __rate = readMessage[Rate](in, __rate, _emptyRegistry)
			case 66 => __user = Some(readMessage[User](in, __user.orElse({
				__user = User.defaultInstance
				__user
			}).get, _emptyRegistry))
			case 74 => __site = Some(readMessage[Site](in, __site.orElse({
				__site = Site.defaultInstance
				__site
			}).get, _emptyRegistry))
			case 82 => __app = Some(readMessage[App](in, __app.orElse({
				__app = App.defaultInstance
				__app
			}).get, _emptyRegistry))
			case 90 => __winner = Some(readMessage[BidWinner](in, __winner.orElse({
				__winner = BidWinner.defaultInstance
				__winner
			}).get, _emptyRegistry))
			case 98 => __losers += readMessage[BidResult](in, BidResult.defaultInstance, _emptyRegistry)
			case 106 => __sdk = Some(readMessage[SDK](in, __sdk.orElse({
				__sdk = SDK.defaultInstance
				__sdk
			}).get, _emptyRegistry))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: TradeLog) = {
		TradeLog(
			m.`bidId`,
			m.`bidTimestamp`,
			m.`impressionType`,
			m.`placement`,
			m.`media`,
			m.`device`,
			m.`rate`,
			m.`user`.orElse(`user`),
			m.`site`.orElse(`site`),
			m.`app`.orElse(`app`),
			m.`winner`.orElse(`winner`),
			`losers` ++ m.`losers`,
			m.`sdk`.orElse(`sdk`)
		)
	}

	def getDefaultInstanceForType = TradeLog.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"bidId\": ").append("\"").append(`bidId`).append("\"").append(',')
			sb.append(indent1).append("\"bidTimestamp\": ").append("\"").append(`bidTimestamp`).append("\"").append(',')
			sb.append(indent1).append("\"impressionType\": ").append("\"").append(`impressionType`).append("\"").append(',')
			sb.append(indent1).append("\"placement\": ").append(`placement`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"media\": ").append(`media`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"device\": ").append(`device`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"rate\": ").append(`rate`.toJson(indent + 1)).append(',')
			if (`user`.isDefined) { sb.append(indent1).append("\"user\": ").append(`user`.get.toJson(indent + 1)).append(',') }
			if (`site`.isDefined) { sb.append(indent1).append("\"site\": ").append(`site`.get.toJson(indent + 1)).append(',') }
			if (`app`.isDefined) { sb.append(indent1).append("\"app\": ").append(`app`.get.toJson(indent + 1)).append(',') }
			if (`winner`.isDefined) { sb.append(indent1).append("\"winner\": ").append(`winner`.get.toJson(indent + 1)).append(',') }
			sb.append(indent1).append("\"losers\": [").append(indent2).append(`losers`.map(_.toJson(indent + 1)).mkString(", " + indent2)).append(indent1).append(']').append(',')
			if (`sdk`.isDefined) { sb.append(indent1).append("\"sdk\": ").append(`sdk`.get.toJson(indent + 1)).append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object TradeLog {
	@scala.beans.BeanProperty val defaultInstance = new TradeLog()

	def parseFrom(data: Array[Byte]): TradeLog = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): TradeLog = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): TradeLog = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): TradeLog = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[TradeLog] = defaultInstance.mergeDelimitedFromStream(stream)

	val BID_ID_FIELD_NUMBER = 1
	val BID_TIMESTAMP_FIELD_NUMBER = 2
	val IMPRESSION_TYPE_FIELD_NUMBER = 3
	val PLACEMENT_FIELD_NUMBER = 4
	val MEDIA_FIELD_NUMBER = 5
	val DEVICE_FIELD_NUMBER = 6
	val RATE_FIELD_NUMBER = 7
	val USER_FIELD_NUMBER = 8
	val SITE_FIELD_NUMBER = 9
	val APP_FIELD_NUMBER = 10
	val WINNER_FIELD_NUMBER = 11
	val LOSERS_FIELD_NUMBER = 12
	val SDK_FIELD_NUMBER = 13

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: TradeLog) = defaultInstance.mergeFrom(prototype)

}
final case class Impression (
	`impressionId`: String = "",
	`impressionType`: IMPRESSIONTYPE.EnumVal = IMPRESSIONTYPE._UNINITIALIZED,
	`impressionTimestamp`: Long = 0L,
	`bidTimestamp`: Long = 0L,
	`bidId`: String = "",
	`clearPrice`: String = "",
	`dspId`: String = "",
	`dealType`: DEALTYPE.EnumVal = DEALTYPE._UNINITIALIZED,
	`placement`: Placement = Placement.defaultInstance,
	`media`: Media = Media.defaultInstance,
	`device`: Device = Device.defaultInstance,
	`rate`: Rate = Rate.defaultInstance,
	`user`: Option[User] = None,
	`site`: Option[Site] = None,
	`app`: Option[App] = None,
	`dspGroupId`: Option[String] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Impression]
	with net.sandrogrzicic.scalabuff.Parser[Impression] {

	def setUser(_f: User) = copy(`user` = Some(_f))
	def setSite(_f: Site) = copy(`site` = Some(_f))
	def setApp(_f: App) = copy(`app` = Some(_f))
	def setDspGroupId(_f: String) = copy(`dspGroupId` = Some(_f))

	def clearUser = copy(`user` = None)
	def clearSite = copy(`site` = None)
	def clearApp = copy(`app` = None)
	def clearDspGroupId = copy(`dspGroupId` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `impressionId`)
		output.writeEnum(2, `impressionType`)
		output.writeInt64(3, `impressionTimestamp`)
		output.writeInt64(4, `bidTimestamp`)
		output.writeString(5, `bidId`)
		output.writeString(6, `clearPrice`)
		output.writeString(7, `dspId`)
		output.writeEnum(8, `dealType`)
		output.writeMessage(9, `placement`)
		output.writeMessage(10, `media`)
		output.writeMessage(11, `device`)
		output.writeMessage(12, `rate`)
		if (`user`.isDefined) output.writeMessage(13, `user`.get)
		if (`site`.isDefined) output.writeMessage(14, `site`.get)
		if (`app`.isDefined) output.writeMessage(15, `app`.get)
		if (`dspGroupId`.isDefined) output.writeString(16, `dspGroupId`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `impressionId`)
		__size += computeEnumSize(2, `impressionType`)
		__size += computeInt64Size(3, `impressionTimestamp`)
		__size += computeInt64Size(4, `bidTimestamp`)
		__size += computeStringSize(5, `bidId`)
		__size += computeStringSize(6, `clearPrice`)
		__size += computeStringSize(7, `dspId`)
		__size += computeEnumSize(8, `dealType`)
		__size += computeMessageSize(9, `placement`)
		__size += computeMessageSize(10, `media`)
		__size += computeMessageSize(11, `device`)
		__size += computeMessageSize(12, `rate`)
		if (`user`.isDefined) __size += computeMessageSize(13, `user`.get)
		if (`site`.isDefined) __size += computeMessageSize(14, `site`.get)
		if (`app`.isDefined) __size += computeMessageSize(15, `app`.get)
		if (`dspGroupId`.isDefined) __size += computeStringSize(16, `dspGroupId`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Impression = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __impressionId: String = ""
		var __impressionType: IMPRESSIONTYPE.EnumVal = IMPRESSIONTYPE._UNINITIALIZED
		var __impressionTimestamp: Long = 0L
		var __bidTimestamp: Long = 0L
		var __bidId: String = ""
		var __clearPrice: String = ""
		var __dspId: String = ""
		var __dealType: DEALTYPE.EnumVal = DEALTYPE._UNINITIALIZED
		var __placement: Placement = Placement.defaultInstance
		var __media: Media = Media.defaultInstance
		var __device: Device = Device.defaultInstance
		var __rate: Rate = Rate.defaultInstance
		var __user: Option[User] = `user`
		var __site: Option[Site] = `site`
		var __app: Option[App] = `app`
		var __dspGroupId: Option[String] = `dspGroupId`

		def __newMerged = Impression(
			__impressionId,
			__impressionType,
			__impressionTimestamp,
			__bidTimestamp,
			__bidId,
			__clearPrice,
			__dspId,
			__dealType,
			__placement,
			__media,
			__device,
			__rate,
			__user,
			__site,
			__app,
			__dspGroupId
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __impressionId = in.readString()
			case 16 => __impressionType = IMPRESSIONTYPE.valueOf(in.readEnum())
			case 24 => __impressionTimestamp = in.readInt64()
			case 32 => __bidTimestamp = in.readInt64()
			case 42 => __bidId = in.readString()
			case 50 => __clearPrice = in.readString()
			case 58 => __dspId = in.readString()
			case 64 => __dealType = DEALTYPE.valueOf(in.readEnum())
			case 74 => __placement = readMessage[Placement](in, __placement, _emptyRegistry)
			case 82 => __media = readMessage[Media](in, __media, _emptyRegistry)
			case 90 => __device = readMessage[Device](in, __device, _emptyRegistry)
			case 98 => __rate = readMessage[Rate](in, __rate, _emptyRegistry)
			case 106 => __user = Some(readMessage[User](in, __user.orElse({
				__user = User.defaultInstance
				__user
			}).get, _emptyRegistry))
			case 114 => __site = Some(readMessage[Site](in, __site.orElse({
				__site = Site.defaultInstance
				__site
			}).get, _emptyRegistry))
			case 122 => __app = Some(readMessage[App](in, __app.orElse({
				__app = App.defaultInstance
				__app
			}).get, _emptyRegistry))
			case 130 => __dspGroupId = Some(in.readString())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Impression) = {
		Impression(
			m.`impressionId`,
			m.`impressionType`,
			m.`impressionTimestamp`,
			m.`bidTimestamp`,
			m.`bidId`,
			m.`clearPrice`,
			m.`dspId`,
			m.`dealType`,
			m.`placement`,
			m.`media`,
			m.`device`,
			m.`rate`,
			m.`user`.orElse(`user`),
			m.`site`.orElse(`site`),
			m.`app`.orElse(`app`),
			m.`dspGroupId`.orElse(`dspGroupId`)
		)
	}

	def getDefaultInstanceForType = Impression.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"impressionId\": ").append("\"").append(`impressionId`).append("\"").append(',')
			sb.append(indent1).append("\"impressionType\": ").append("\"").append(`impressionType`).append("\"").append(',')
			sb.append(indent1).append("\"impressionTimestamp\": ").append("\"").append(`impressionTimestamp`).append("\"").append(',')
			sb.append(indent1).append("\"bidTimestamp\": ").append("\"").append(`bidTimestamp`).append("\"").append(',')
			sb.append(indent1).append("\"bidId\": ").append("\"").append(`bidId`).append("\"").append(',')
			sb.append(indent1).append("\"clearPrice\": ").append("\"").append(`clearPrice`).append("\"").append(',')
			sb.append(indent1).append("\"dspId\": ").append("\"").append(`dspId`).append("\"").append(',')
			sb.append(indent1).append("\"dealType\": ").append("\"").append(`dealType`).append("\"").append(',')
			sb.append(indent1).append("\"placement\": ").append(`placement`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"media\": ").append(`media`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"device\": ").append(`device`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"rate\": ").append(`rate`.toJson(indent + 1)).append(',')
			if (`user`.isDefined) { sb.append(indent1).append("\"user\": ").append(`user`.get.toJson(indent + 1)).append(',') }
			if (`site`.isDefined) { sb.append(indent1).append("\"site\": ").append(`site`.get.toJson(indent + 1)).append(',') }
			if (`app`.isDefined) { sb.append(indent1).append("\"app\": ").append(`app`.get.toJson(indent + 1)).append(',') }
			if (`dspGroupId`.isDefined) { sb.append(indent1).append("\"dspGroupId\": ").append("\"").append(`dspGroupId`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Impression {
	@scala.beans.BeanProperty val defaultInstance = new Impression()

	def parseFrom(data: Array[Byte]): Impression = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Impression = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Impression = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Impression = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Impression] = defaultInstance.mergeDelimitedFromStream(stream)

	val IMPRESSION_ID_FIELD_NUMBER = 1
	val IMPRESSION_TYPE_FIELD_NUMBER = 2
	val IMPRESSION_TIMESTAMP_FIELD_NUMBER = 3
	val BID_TIMESTAMP_FIELD_NUMBER = 4
	val BID_ID_FIELD_NUMBER = 5
	val CLEAR_PRICE_FIELD_NUMBER = 6
	val DSP_ID_FIELD_NUMBER = 7
	val DEAL_TYPE_FIELD_NUMBER = 8
	val PLACEMENT_FIELD_NUMBER = 9
	val MEDIA_FIELD_NUMBER = 10
	val DEVICE_FIELD_NUMBER = 11
	val RATE_FIELD_NUMBER = 12
	val USER_FIELD_NUMBER = 13
	val SITE_FIELD_NUMBER = 14
	val APP_FIELD_NUMBER = 15
	val DSP_GROUP_ID_FIELD_NUMBER = 16

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Impression) = defaultInstance.mergeFrom(prototype)

}
final case class Click (
	`clickId`: String = "",
	`impressionType`: IMPRESSIONTYPE.EnumVal = IMPRESSIONTYPE._UNINITIALIZED,
	`clickTimestamp`: Long = 0L,
	`bidTimestamp`: Long = 0L,
	`bidId`: String = "",
	`clearPrice`: String = "",
	`dspId`: String = "",
	`dealType`: DEALTYPE.EnumVal = DEALTYPE._UNINITIALIZED,
	`placement`: Placement = Placement.defaultInstance,
	`media`: Media = Media.defaultInstance,
	`device`: Device = Device.defaultInstance,
	`rate`: Rate = Rate.defaultInstance,
	`user`: Option[User] = None,
	`site`: Option[Site] = None,
	`app`: Option[App] = None,
	`dspGroupId`: Option[String] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Click]
	with net.sandrogrzicic.scalabuff.Parser[Click] {

	def setUser(_f: User) = copy(`user` = Some(_f))
	def setSite(_f: Site) = copy(`site` = Some(_f))
	def setApp(_f: App) = copy(`app` = Some(_f))
	def setDspGroupId(_f: String) = copy(`dspGroupId` = Some(_f))

	def clearUser = copy(`user` = None)
	def clearSite = copy(`site` = None)
	def clearApp = copy(`app` = None)
	def clearDspGroupId = copy(`dspGroupId` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `clickId`)
		output.writeEnum(2, `impressionType`)
		output.writeInt64(3, `clickTimestamp`)
		output.writeInt64(4, `bidTimestamp`)
		output.writeString(5, `bidId`)
		output.writeString(6, `clearPrice`)
		output.writeString(7, `dspId`)
		output.writeEnum(8, `dealType`)
		output.writeMessage(9, `placement`)
		output.writeMessage(10, `media`)
		output.writeMessage(11, `device`)
		output.writeMessage(12, `rate`)
		if (`user`.isDefined) output.writeMessage(13, `user`.get)
		if (`site`.isDefined) output.writeMessage(14, `site`.get)
		if (`app`.isDefined) output.writeMessage(15, `app`.get)
		if (`dspGroupId`.isDefined) output.writeString(16, `dspGroupId`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `clickId`)
		__size += computeEnumSize(2, `impressionType`)
		__size += computeInt64Size(3, `clickTimestamp`)
		__size += computeInt64Size(4, `bidTimestamp`)
		__size += computeStringSize(5, `bidId`)
		__size += computeStringSize(6, `clearPrice`)
		__size += computeStringSize(7, `dspId`)
		__size += computeEnumSize(8, `dealType`)
		__size += computeMessageSize(9, `placement`)
		__size += computeMessageSize(10, `media`)
		__size += computeMessageSize(11, `device`)
		__size += computeMessageSize(12, `rate`)
		if (`user`.isDefined) __size += computeMessageSize(13, `user`.get)
		if (`site`.isDefined) __size += computeMessageSize(14, `site`.get)
		if (`app`.isDefined) __size += computeMessageSize(15, `app`.get)
		if (`dspGroupId`.isDefined) __size += computeStringSize(16, `dspGroupId`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Click = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __clickId: String = ""
		var __impressionType: IMPRESSIONTYPE.EnumVal = IMPRESSIONTYPE._UNINITIALIZED
		var __clickTimestamp: Long = 0L
		var __bidTimestamp: Long = 0L
		var __bidId: String = ""
		var __clearPrice: String = ""
		var __dspId: String = ""
		var __dealType: DEALTYPE.EnumVal = DEALTYPE._UNINITIALIZED
		var __placement: Placement = Placement.defaultInstance
		var __media: Media = Media.defaultInstance
		var __device: Device = Device.defaultInstance
		var __rate: Rate = Rate.defaultInstance
		var __user: Option[User] = `user`
		var __site: Option[Site] = `site`
		var __app: Option[App] = `app`
		var __dspGroupId: Option[String] = `dspGroupId`

		def __newMerged = Click(
			__clickId,
			__impressionType,
			__clickTimestamp,
			__bidTimestamp,
			__bidId,
			__clearPrice,
			__dspId,
			__dealType,
			__placement,
			__media,
			__device,
			__rate,
			__user,
			__site,
			__app,
			__dspGroupId
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __clickId = in.readString()
			case 16 => __impressionType = IMPRESSIONTYPE.valueOf(in.readEnum())
			case 24 => __clickTimestamp = in.readInt64()
			case 32 => __bidTimestamp = in.readInt64()
			case 42 => __bidId = in.readString()
			case 50 => __clearPrice = in.readString()
			case 58 => __dspId = in.readString()
			case 64 => __dealType = DEALTYPE.valueOf(in.readEnum())
			case 74 => __placement = readMessage[Placement](in, __placement, _emptyRegistry)
			case 82 => __media = readMessage[Media](in, __media, _emptyRegistry)
			case 90 => __device = readMessage[Device](in, __device, _emptyRegistry)
			case 98 => __rate = readMessage[Rate](in, __rate, _emptyRegistry)
			case 106 => __user = Some(readMessage[User](in, __user.orElse({
				__user = User.defaultInstance
				__user
			}).get, _emptyRegistry))
			case 114 => __site = Some(readMessage[Site](in, __site.orElse({
				__site = Site.defaultInstance
				__site
			}).get, _emptyRegistry))
			case 122 => __app = Some(readMessage[App](in, __app.orElse({
				__app = App.defaultInstance
				__app
			}).get, _emptyRegistry))
			case 130 => __dspGroupId = Some(in.readString())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Click) = {
		Click(
			m.`clickId`,
			m.`impressionType`,
			m.`clickTimestamp`,
			m.`bidTimestamp`,
			m.`bidId`,
			m.`clearPrice`,
			m.`dspId`,
			m.`dealType`,
			m.`placement`,
			m.`media`,
			m.`device`,
			m.`rate`,
			m.`user`.orElse(`user`),
			m.`site`.orElse(`site`),
			m.`app`.orElse(`app`),
			m.`dspGroupId`.orElse(`dspGroupId`)
		)
	}

	def getDefaultInstanceForType = Click.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"clickId\": ").append("\"").append(`clickId`).append("\"").append(',')
			sb.append(indent1).append("\"impressionType\": ").append("\"").append(`impressionType`).append("\"").append(',')
			sb.append(indent1).append("\"clickTimestamp\": ").append("\"").append(`clickTimestamp`).append("\"").append(',')
			sb.append(indent1).append("\"bidTimestamp\": ").append("\"").append(`bidTimestamp`).append("\"").append(',')
			sb.append(indent1).append("\"bidId\": ").append("\"").append(`bidId`).append("\"").append(',')
			sb.append(indent1).append("\"clearPrice\": ").append("\"").append(`clearPrice`).append("\"").append(',')
			sb.append(indent1).append("\"dspId\": ").append("\"").append(`dspId`).append("\"").append(',')
			sb.append(indent1).append("\"dealType\": ").append("\"").append(`dealType`).append("\"").append(',')
			sb.append(indent1).append("\"placement\": ").append(`placement`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"media\": ").append(`media`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"device\": ").append(`device`.toJson(indent + 1)).append(',')
			sb.append(indent1).append("\"rate\": ").append(`rate`.toJson(indent + 1)).append(',')
			if (`user`.isDefined) { sb.append(indent1).append("\"user\": ").append(`user`.get.toJson(indent + 1)).append(',') }
			if (`site`.isDefined) { sb.append(indent1).append("\"site\": ").append(`site`.get.toJson(indent + 1)).append(',') }
			if (`app`.isDefined) { sb.append(indent1).append("\"app\": ").append(`app`.get.toJson(indent + 1)).append(',') }
			if (`dspGroupId`.isDefined) { sb.append(indent1).append("\"dspGroupId\": ").append("\"").append(`dspGroupId`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Click {
	@scala.beans.BeanProperty val defaultInstance = new Click()

	def parseFrom(data: Array[Byte]): Click = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Click = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Click = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Click = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Click] = defaultInstance.mergeDelimitedFromStream(stream)

	val CLICK_ID_FIELD_NUMBER = 1
	val IMPRESSION_TYPE_FIELD_NUMBER = 2
	val CLICK_TIMESTAMP_FIELD_NUMBER = 3
	val BID_TIMESTAMP_FIELD_NUMBER = 4
	val BID_ID_FIELD_NUMBER = 5
	val CLEAR_PRICE_FIELD_NUMBER = 6
	val DSP_ID_FIELD_NUMBER = 7
	val DEAL_TYPE_FIELD_NUMBER = 8
	val PLACEMENT_FIELD_NUMBER = 9
	val MEDIA_FIELD_NUMBER = 10
	val DEVICE_FIELD_NUMBER = 11
	val RATE_FIELD_NUMBER = 12
	val USER_FIELD_NUMBER = 13
	val SITE_FIELD_NUMBER = 14
	val APP_FIELD_NUMBER = 15
	val DSP_GROUP_ID_FIELD_NUMBER = 16

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Click) = defaultInstance.mergeFrom(prototype)

}
final case class Event (
	`eventType`: Event.EVENTTYPE.EnumVal = Event.EVENTTYPE._UNINITIALIZED,
	`eventKey`: String = "",
	`tradeLog`: Option[TradeLog] = None,
	`impression`: Option[Impression] = None,
	`click`: Option[Click] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Event]
	with net.sandrogrzicic.scalabuff.Parser[Event] {

	def setTradeLog(_f: TradeLog) = copy(`tradeLog` = Some(_f))
	def setImpression(_f: Impression) = copy(`impression` = Some(_f))
	def setClick(_f: Click) = copy(`click` = Some(_f))

	def clearTradeLog = copy(`tradeLog` = None)
	def clearImpression = copy(`impression` = None)
	def clearClick = copy(`click` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeEnum(1, `eventType`)
		output.writeString(2, `eventKey`)
		if (`tradeLog`.isDefined) output.writeMessage(3, `tradeLog`.get)
		if (`impression`.isDefined) output.writeMessage(4, `impression`.get)
		if (`click`.isDefined) output.writeMessage(5, `click`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeEnumSize(1, `eventType`)
		__size += computeStringSize(2, `eventKey`)
		if (`tradeLog`.isDefined) __size += computeMessageSize(3, `tradeLog`.get)
		if (`impression`.isDefined) __size += computeMessageSize(4, `impression`.get)
		if (`click`.isDefined) __size += computeMessageSize(5, `click`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Event = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __eventType: Event.EVENTTYPE.EnumVal = Event.EVENTTYPE._UNINITIALIZED
		var __eventKey: String = ""
		var __tradeLog: Option[TradeLog] = `tradeLog`
		var __impression: Option[Impression] = `impression`
		var __click: Option[Click] = `click`

		def __newMerged = Event(
			__eventType,
			__eventKey,
			__tradeLog,
			__impression,
			__click
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __eventType = Event.EVENTTYPE.valueOf(in.readEnum())
			case 18 => __eventKey = in.readString()
			case 26 => __tradeLog = Some(readMessage[TradeLog](in, __tradeLog.orElse({
				__tradeLog = TradeLog.defaultInstance
				__tradeLog
			}).get, _emptyRegistry))
			case 34 => __impression = Some(readMessage[Impression](in, __impression.orElse({
				__impression = Impression.defaultInstance
				__impression
			}).get, _emptyRegistry))
			case 42 => __click = Some(readMessage[Click](in, __click.orElse({
				__click = Click.defaultInstance
				__click
			}).get, _emptyRegistry))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Event) = {
		Event(
			m.`eventType`,
			m.`eventKey`,
			m.`tradeLog`.orElse(`tradeLog`),
			m.`impression`.orElse(`impression`),
			m.`click`.orElse(`click`)
		)
	}

	def getDefaultInstanceForType = Event.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"eventType\": ").append("\"").append(`eventType`).append("\"").append(',')
			sb.append(indent1).append("\"eventKey\": ").append("\"").append(`eventKey`).append("\"").append(',')
			if (`tradeLog`.isDefined) { sb.append(indent1).append("\"tradeLog\": ").append(`tradeLog`.get.toJson(indent + 1)).append(',') }
			if (`impression`.isDefined) { sb.append(indent1).append("\"impression\": ").append(`impression`.get.toJson(indent + 1)).append(',') }
			if (`click`.isDefined) { sb.append(indent1).append("\"click\": ").append(`click`.get.toJson(indent + 1)).append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Event {
	@scala.beans.BeanProperty val defaultInstance = new Event()

	def parseFrom(data: Array[Byte]): Event = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Event = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Event = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Event = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Event] = defaultInstance.mergeDelimitedFromStream(stream)

	val EVENT_TYPE_FIELD_NUMBER = 1
	val EVENT_KEY_FIELD_NUMBER = 2
	val TRADE_LOG_FIELD_NUMBER = 3
	val IMPRESSION_FIELD_NUMBER = 4
	val CLICK_FIELD_NUMBER = 5

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Event) = defaultInstance.mergeFrom(prototype)

	object EVENTTYPE extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val TRADELOG = new EnumVal { val name = "TRADELOG"; val id = 1 }
		val IMPRESSION = new EnumVal { val name = "IMPRESSION"; val id = 2 }
		val CLICK = new EnumVal { val name = "CLICK"; val id = 3 }

		val TRADELOG_VALUE = 1
		val IMPRESSION_VALUE = 2
		val CLICK_VALUE = 3

		def valueOf(id: Int) = id match {
			case 1 => TRADELOG
			case 2 => IMPRESSION
			case 3 => CLICK
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}

object Protocol {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "BidResult" -> (bytes ⇒ BidResult.parseFrom(bytes)),
		 "Rate" -> (bytes ⇒ Rate.parseFrom(bytes)),
		 "Placement" -> (bytes ⇒ Placement.parseFrom(bytes)),
		 "Media" -> (bytes ⇒ Media.parseFrom(bytes)),
		 "Site" -> (bytes ⇒ Site.parseFrom(bytes)),
		 "App" -> (bytes ⇒ App.parseFrom(bytes)),
		 "Device" -> (bytes ⇒ Device.parseFrom(bytes)),
		 "SDK" -> (bytes ⇒ SDK.parseFrom(bytes)),
		 "User" -> (bytes ⇒ User.parseFrom(bytes)),
		 "BidWinner" -> (bytes ⇒ BidWinner.parseFrom(bytes)),
		 "TradeLog" -> (bytes ⇒ TradeLog.parseFrom(bytes)),
		 "Impression" -> (bytes ⇒ Impression.parseFrom(bytes)),
		 "Click" -> (bytes ⇒ Click.parseFrom(bytes)),
		 "Event" -> (bytes ⇒ Event.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}
