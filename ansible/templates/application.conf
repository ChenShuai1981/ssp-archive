akka {
  stdout-loglevel = "INFO"
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "{{ HOST_IP }}"
      hostname = ${?HOST}
      port = 2661
      port = ${?PORT}
    }
  }
  cluster {
    seed-nodes = []
    auto-down = on
    auto-down-unreachable-after = 10s
    min-nr-of-members = 1
  }
}
couchbase {
  connection-string = "{{ CB_HOST_URL }}"
  buckets {
    main {  # Bucket for CouchbaseNodeDiscoverer.
      name = "{{ CB_BUCKET_DEDUP_MAIN_NAME }}"
      password = "{{ CB_BUCKET_DEDUP_MAIN_PASS }}"
      key-prefix = "{{ CB_BUCKET_DEDUP_MAIN_KEY_PREFIX }}"
    }
    data {  # Bucket for SupportingData.
      name = "{{ CB_BUCKET_DEDUP_DATA_NAME }}"
      password = "{{ CB_BUCKET_DEDUP_DATA_PASS }}"
      key-prefix = "{{ CB_BUCKET_DEDUP_DATA_KEY_PREFIX }}"
    }
    dedup {  # Bucket for dedup kafka messages.
      name = "{{ CB_BUCKET_DEDUP_DEDUP_NAME }}"
      password = "{{ CB_BUCKET_DEDUP_DEDUP_PASS }}"
      key-prefix = "{{ CB_BUCKET_DEDUP_DEDUP_KEY_PREFIX }}"
    }
    offset {  # Bucket for kafka topic partition offset.
      name = "{{ CB_BUCKET_DEDUP_OFFSET_NAME }}"
      password = "{{ CB_BUCKET_DEDUP_OFFSET_PASS }}"
      key-prefix = "{{ CB_BUCKET_DEDUP_OFFSET_KEY_PREFIX }}"
    }
  }
}

kafka {
    producer {
      delayed {
        topic = "{{ KAFKA_TOPIC_DEDUP_DELAY }}"
        brokers = "{{ KAFKA_BROKERS_DEDUP_DELAY}}"
      }
      warning {
  	 topic = "{{ KAFKA_TOPIC_DEDUP_WARNING }}"
         brokers = "{{ KAFKA_BROKERS_DEDUP_WARNING }}"
      }
      flatten {
        topic = "{{ KAFKA_TOPIC_DEDUP_FLATTEN }}"
        brokers = "{{ KAFKA_BROKERS_DEDUP_FLATTEN }}"
      }
    }
    consumer {
      topic = "{{ KAFKA_TOPIC_DEDUP_CONSUMER }}"
      brokers = "{{ KAFKA_BROKERS_DEDUP_CONSUMER }}"
    }
  }

ssp-dedup {
  cluster-group = "ssp-dedup"
  # Time to wait before considering cluster to be fully formed (i. e. time during which we expect all nodes to start)
  cluster-rampup-time = 30s
  consume-batch-size = {{ BATCH_SIZE }}
  dedup-key-ttl = {{ DEDUP_KEY_TTL }}

  retries {
    dedup {
      max = 10
      interval = 500ms
    }
    flatten {
      max = 10
      interval = 500ms
    }
    produce {
      max = 10
      interval = 500ms
    }
    couchbase {
      max = 60 #times
      interval = 2000ms
    }
  }
  flatten {
  delay-period {
    banner = 7200s
    interstitial = 21600s
  }
  secret-key {
    vpon = "#1$6%^8&"
    appnexus = "%23!8$@#"
    doubleclick = "#*2@3&4%"
    pinyou = "#1$6%^8&"
  }
  cache {
    concurrency-level = 8
    publisher {
      max-size = 1000
      initial-capacity = 1000
      expire = 300s
    }
    placement {
      max-size = 10000
      initial-capacity = 10000
      expire = 300s
    }
    exchange-rate {
      max-size = 1000
      initial-capacity = 1000
      expire = 600s
    }
    publisher-ssp-tax-rate {
      max-size = 1000
      initial-capacity = 1000
      expire = 600s
    }
    dsp-ssp-tax-rate {
      max-size = 1000
      initial-capacity = 1000
      expire = 600s
    }
    device {
      max-size = 100000
      initial-capacity = 100000
    }
    geography {
      max-size = 1000000
      initial-capacity = 1000000
    }
  }
}
}
